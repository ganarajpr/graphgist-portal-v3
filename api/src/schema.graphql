scalar Upload

type Query {
  graphGistSearch(searchString: String): [GraphGist]
    @cypher(
      statement: """
      MATCH (asset:GraphGist {status:'live'})
      WHERE toLower(asset.title) CONTAINS toLower($searchString)
      RETURN asset
      UNION
      MATCH (asset:GraphGist {status:'live'})-[:FOR_INDUSTRY|:FOR_USE_CASE|:FOR_CHALLENGE]->(category)
      WHERE toLower(category.name) CONTAINS toLower($searchString)
      RETURN asset
      UNION
      MATCH (asset:GraphGist {status:'live'})<-[:WROTE]-(author:Person)
      WHERE toLower(author.name) CONTAINS toLower($searchString)
      RETURN asset
      """
    )
    challengeSearch(searchString: String): [Challenge]
    @cypher(
      statement: """
      MATCH (asset:Challenge)
      WHERE toLower(asset.name) CONTAINS toLower($searchString)
      RETURN asset
      """
    )
  graphGistsByCategory(slug: String): [GraphGist]
    @cypher(
      statement: """
      MATCH (asset:GraphGist {status:'live'})-[:FOR_INDUSTRY|:FOR_USE_CASE|:FOR_CHALLENGE]->(category)
      WHERE category.slug = $slug
      RETURN asset
      """
    )
  graphGistsByAuthorUser(uuid: ID!): [GraphGist]
    @cypher(
      statement: """
      MATCH (asset:GraphGist {status:'live'})<-[:WROTE]-(p:Person)<-[:IS_PERSON]-(u:User {uuid: $uuid})
      RETURN asset
      """
    )
  graphGistsByAuthorPerson(uuid: ID!): [GraphGist]
    @cypher(
      statement: """
      MATCH (asset:GraphGist {status:'live'})<-[:WROTE]-(p:Person {uuid: $uuid})
      RETURN asset
      """
    )
  myGraphGists: [GraphGist]
    @cypher(
      statement: """
      MATCH (asset:GraphGist)<-[:WROTE]-(p:Person)<-[:IS_PERSON]-(u:User {uuid: $cypherParams.currentUser})
      RETURN asset
      """
    )
  getCategory(slug: String!): Asset
    @cypher(
      statement: """
      MATCH (c {slug: $slug})
      WHERE c:UseCase OR c:Industry OR c:Challenge
      RETURN c
      """
    )
  getGraphGistCandidate(uuid: ID!): GraphGistCandidate
  getConsoleSessionId(neo4j_version: String): String
  queryConsole(
    cypher: String!
    neo4j_version: String
    session_id: String!
  ): String
  myImages: [Image]
    @cypher(
      statement: """
      MATCH (i:Image)<-[r:OWN_IMAGE]-(p:Person)<-[:IS_PERSON]-(u:User {uuid: $cypherParams.currentUser})
      RETURN i
      """
    )
  me: User
  GraphGistCandidate: [GraphGistCandidate]
}

type Mutation {
  Authenticate(token: String): User
  PreviewGraphGist(asciidoc: String): String
  CreateGraphGist(graphgist: GraphGistInput!): GraphGistCandidate
  UpdateGraphGist(uuid: ID!, graphgist: GraphGistInput!): GraphGistCandidate
  UpdateUser(user: UserInput!): User
  PublishGraphGistCandidate(uuid: ID!): GraphGist
  FlagGraphGistAsGuide(uuid: ID!, is_guide: Boolean!): GraphGist
  FlagGraphGistAsFeatured(uuid: ID!, featured: Boolean!): GraphGist
  DisableGraphGist(uuid: ID!): GraphGist
  CreateChallenge(challenge: ChallengeInput!): Challenge
  UpdateChallenge(uuid: ID!, challenge: ChallengeInput!): Challenge
  Rate(to: ID!, level: Int!): Rating
  SubmitForApprovalGraphGist(uuid: ID!): GraphGist
  DeleteImage(uuid: ID!): Boolean
}

type User {
  uuid: ID!
  username: String!
  email: String
  name: String
  image: String
  twitter_username: String
  person: Person @relation(name: "IS_PERSON", direction: OUT)
  my_perms: [String]
}

interface Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String
}

type Person implements Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String
  email: String

  twitter_username: String

  legacy_id: Int
  legacy_neo_id: Int

  postal_address: String
  tshirt_size: String
  tshirt_size_other: String

  authored_gists: [GraphGist] @relation(name: "WROTE", direction: OUT)

  user: User @relation(name: "IS_PERSON", direction: IN)
}

type Image {
  uuid: ID!

  title: String
  description: String
  details: String
  original_url: String
  source_url: String @cypher(statement: "RETURN this")
  source: String

  source_content_type: String
  source_file_name: String
  source_file_size: Int
  source_updated_at: DateTime

  created_at: DateTime
  updated_at: DateTime
}

type Industry implements Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String

  graphgist: GraphGist @relation(name: "FOR_INDUSTRY", direction: IN)
  num_graphgists: Int @cypher(statement: "RETURN this")
  my_perms: [String]
}

type UseCase implements Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String

  graphgist: GraphGist @relation(name: "FOR_USE_CASE", direction: IN)
  num_graphgists: Int @cypher(statement: "RETURN this")
  my_perms: [String]
}

type Challenge implements Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String

  start_date: DateTime
  end_date: DateTime
  graphgist: GraphGist @relation(name: "FOR_CHALLENGE", direction: IN)
  num_graphgists: Int @cypher(statement: "RETURN this")
  my_perms: [String]
}

enum GraphGistStatus {
  live
  disabled
  candidate
  draft
}

interface GraphGistInterface {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String

  author: Person @relation(name: "WROTE", direction: IN)

  is_guide: Boolean

  url: String
  raw_url: String

  asciidoc: String!
  html: String!
  raw_html: String!
  neo4j_version: String

  query_cache: String!
  query_cache_html: String
  has_errors: Boolean!

  status: GraphGistStatus

  cached: Boolean

  legacy_id: String
  legacy_neo_id: Int
  legacy_poster_image: String
  legacy_rated: String

  created_at: DateTime
  updated_at: DateTime

  render_id: String

  industries: [Industry] @relation(name: "FOR_INDUSTRY", direction: OUT)
  use_cases: [UseCase] @relation(name: "FOR_USE_CASE", direction: OUT)
  challenges: [Challenge] @relation(name: "FOR_CHALLENGE", direction: OUT)
}

type GraphGist implements GraphGistInterface & Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String

  title: String

  author: Person @relation(name: "WROTE", direction: IN)

  is_guide: Boolean

  url: String
  raw_url: String

  asciidoc: String!
  html: String!
  raw_html: String!
  guide_html: String
  neo4j_version: String

  query_cache: String!
  query_cache_html: String
  has_errors: Boolean!

  status: GraphGistStatus

  cached: Boolean

  legacy_id: String
  legacy_neo_id: Int
  legacy_poster_image: String
  legacy_rated: String

  created_at: DateTime
  updated_at: DateTime

  render_id: String

  industries: [Industry] @relation(name: "FOR_INDUSTRY", direction: OUT)
  use_cases: [UseCase] @relation(name: "FOR_USE_CASE", direction: OUT)
  challenges: [Challenge] @relation(name: "FOR_CHALLENGE", direction: OUT)
  categories: [Asset]
    @cypher(
      statement: """
      MATCH (this)-[:FOR_CHALLENGE|:FOR_USE_CASE|:FOR_INDUSTRY]->(category)
      RETURN category
      """
    )

  is_candidate_updated: Boolean
  featured: Boolean
  avg_rating: Float!
    @cypher(
      statement: """
      MATCH (this)<-[r:RATES]-(User)
      WHERE exists(r.level)
      WITH avg(r.level) as avg_rating
      RETURN CASE
        WHEN avg_rating >= 0
        THEN avg_rating
        ELSE 0
      END
      """
    )
  my_perms: [String]
  my_rating: Rating
  candidate: GraphGistCandidate @relation(name: "IS_VERSION", direction: IN)
}

type GraphGistCandidate implements GraphGistInterface & Asset {
  uuid: ID!
  image: [Image] @relation(name: "HAS_IMAGE", direction: OUT)
  name: String
  slug: String
  summary: String

  title: String

  author: Person @relation(name: "WROTE", direction: IN)

  is_guide: Boolean

  url: String
  raw_url: String

  asciidoc: String!
  html: String!
  raw_html: String!
  guide_html: String
  neo4j_version: String

  query_cache: String!
  query_cache_html: String
  has_errors: Boolean!

  status: GraphGistStatus

  cached: Boolean

  legacy_id: String
  legacy_neo_id: Int
  legacy_poster_image: String
  legacy_rated: String

  created_at: DateTime
  updated_at: DateTime

  render_id: String

  graphgist: GraphGist @relation(name: "IS_VERSION", direction: OUT)

  industries: [Industry] @relation(name: "FOR_INDUSTRY", direction: OUT)
  use_cases: [UseCase] @relation(name: "FOR_USE_CASE", direction: OUT)
  challenges: [Challenge] @relation(name: "FOR_CHALLENGE", direction: OUT)
  categories: [Asset]
    @cypher(
      statement: """
      MATCH (this)-[:FOR_CHALLENGE|:FOR_USE_CASE|:FOR_INDUSTRY]->(category)
      RETURN category
      """
    )
  my_perms: [String]
}

type Rating @relation(name: "RATES") {
  from: User!
  to: Asset!
  level: Int!
  rated_at: DateTime!
}

input GraphGistInput {
  slug: String
  summary: String

  title: String!

  is_guide: Boolean

  url: String

  author: ID!

  asciidoc: String!
  neo4j_version: String

  industries: [ID]
  use_cases: [ID]
  challenges: [ID]

  images: [Upload]

  status: GraphGistStatus
  featured: Boolean
}

input UserInput {
  email: String!
  name: String!
  twitter_username: String
  tshirt_size: String
  tshirt_size_other: String
}

input ChallengeInput {
    images: [Upload]
    name: String!
    slug: String
    summary: String
    start_date: DateTime
    end_date: DateTime
}
